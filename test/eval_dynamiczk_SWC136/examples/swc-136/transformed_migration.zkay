pragma zkay ^0.3.0;

contract Odd_Even {
    final address admin;
    uint32 sum_original;
    uint counter = 0;
    mapping(address => uint32) balance_original;
    mapping(uint => address) players;
    address winner;
    uint play_deadline;
    uint _now = block.timestamp;
    uint32@admin<+> sum;
    mapping(address!x => uint32@x<+>) balance;

    constructor() public {
        admin = me;
    }

    function buy() public payable {
        balance[me] = addhom(unhom(balance[me]) + reveal(uint32(msg.value), me));
    }

    function transfer(uint32@me<+> amount, address to) public {
        require(reveal(unhom(amount) <= unhom(balance[me]), all));
        balance[me] = addhom(unhom(balance[me]) - unhom(amount));
        balance[to] = balance[to] + reveal(amount, to);
    }

    function sell(uint32 amount) public {
        require(reveal(reveal(amount, me) <= unhom(balance[me]), all));
        balance[me] = addhom(unhom(balance[me]) - reveal(amount, me));
        msg.sender.transfer(amount);
    }

    function start(uint32@me number) public {
        require(me == admin);
        require(_now > play_deadline);
        if (counter >= 1) {
            address player1 = players[0];
            balance[player1] = balance[player1] + reveal(1, player1);
            if (counter == 2) {
                address player2 = players[1];
                balance[player2] = balance[player2] + reveal(1, player2);
            }
            counter = 0;
        }
        sum = addhom(unhom(sum) + number);
        play_deadline = _now + 2;
    }

    function play(uint32@me number) public {
        require(_now <= play_deadline);
        require(reveal(reveal(1, me) <= unhom(balance[me]), all));
        require(counter < 2);
        require(me != admin);
        balance[me] = addhom(unhom(balance[me]) - reveal(1, me));
        sum = sum + reveal(number, admin);
        players[counter] = me;
        counter = counter + 1;
    }

    function select_winner() public {
        require(me == admin);
        require(_now > play_deadline);
        if (counter == 1) {
            address player = players[0];
            balance[player] = balance[player] + reveal(1, player);
        }
        if (counter == 2) {
            uint index = reveal(unhom(sum) % reveal(2, me), all);
            winner = players[index];
            balance[winner] = balance[winner] + reveal(2, winner);
        }
        counter = 0;
    }

    function _test_advance_time() public {
        _now = _now + 3;
    }

    function consistency_sum() public {
        sum = reveal(sum_original, admin);
    }

    function consistency_balance(address param1) public {
        balance[param1] = reveal(balance_original[param1], param1);
    }
}