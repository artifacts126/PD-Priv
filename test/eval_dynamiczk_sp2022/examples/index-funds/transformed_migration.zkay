pragma zkay ^0.3.0;

contract IndexFunds {
    final address admin;
    mapping(address => uint32) stocks_in_funds;
    mapping(address => uint32) stock_price;
    uint32 current_funds_price;
    mapping(address => uint32) balance_original;
    mapping(address => uint32) shares_original;
    uint32 total_shares_original;
    mapping(address!x => uint32@x<+>) balance;
    mapping(address!x => uint32@x<+>) shares;
    uint32@admin<+> total_shares;

    constructor() public {
        admin = me;
    }

    function add_stocks_to_funds(address stock, uint32 amount, uint32 initial_price) public {
        require(me == admin);
        require(stocks_in_funds[stock] == 0);
        stocks_in_funds[stock] = amount;
        stock_price[stock] = initial_price;
        current_funds_price = current_funds_price + amount * initial_price;
    }

    function pay_into() public payable {
        balance[me] = addhom(unhom(balance[me]) + reveal(uint32(msg.value), me));
    }

    function pay_out(uint32 val) public {
        require(reveal(unhom(balance[me]) >= reveal(val, me), all));
        balance[me] = addhom(unhom(balance[me]) - reveal(val, me));
        msg.sender.transfer(val);
    }

    function buy_shares(uint32@me<+> num_shares) public {
        require(reveal(unhom(balance[me]) >= unhom(num_shares) * reveal(current_funds_price, me), all));
        total_shares = total_shares + reveal(num_shares, admin);
        shares[me] = addhom(unhom(shares[me]) + unhom(num_shares));
        balance[me] = addhom(unhom(balance[me]) - unhom(num_shares) * reveal(current_funds_price, me));
    }

    function sell_shares(uint32@me<+> num_shares) public {
        require(reveal(unhom(shares[me]) >= unhom(num_shares), all));
        total_shares = total_shares - reveal(num_shares, admin);
        shares[me] = addhom(unhom(shares[me]) - unhom(num_shares));
        balance[me] = addhom(unhom(balance[me]) + unhom(num_shares) * reveal(current_funds_price, me));
    }

    function report_new_stock_price(uint32 new_price) public payable {
        require(stocks_in_funds[me] > 0);
        uint32 old_price = stock_price[me];
        stock_price[me] = new_price;
        current_funds_price = current_funds_price - old_price * stocks_in_funds[me] + new_price * stocks_in_funds[me];
    }

    function consistency_balance(address param1) public {
        balance[param1] = reveal(balance_original[param1], param1);
    }

    function consistency_shares(address param1) public {
        shares[param1] = reveal(shares_original[param1], param1);
    }

    function consistency_total_shares() public {
        total_shares = reveal(total_shares_original, admin);
    }
}