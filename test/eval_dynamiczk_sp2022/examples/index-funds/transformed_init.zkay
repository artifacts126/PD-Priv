pragma zkay ^0.3.0;

contract IndexFunds {
    address admin;
    mapping(address => uint32) stocks_in_funds;
    mapping(address => uint32) stock_price;
    uint32 current_funds_price;
    mapping(address => uint32) balance;
    mapping(address => uint32) shares;
    uint32 total_shares;

    function add_stocks_to_funds(address stock, uint32 amount, uint32 initial_price) public {
        require(me == admin);
        require(stocks_in_funds[stock] == 0);
        stocks_in_funds[stock] = amount;
        stock_price[stock] = initial_price;
        current_funds_price = current_funds_price + amount * initial_price;
    }

    function pay_into() public payable {
        balance[me] = balance[me] + uint32(msg.value);
    }

    function pay_out(uint32 val) public {
        require(balance[me] >= val);
        balance[me] = balance[me] - val;
        msg.sender.transfer(val);
    }

    function buy_shares(uint32 num_shares) public {
        require(balance[me] >= num_shares * current_funds_price);
        total_shares = total_shares + num_shares;
        shares[me] = shares[me] + num_shares;
        balance[me] = balance[me] - num_shares * current_funds_price;
    }

    function sell_shares(uint32 num_shares) public {
        require(shares[me] >= num_shares);
        total_shares = total_shares - num_shares;
        shares[me] = shares[me] - num_shares;
        balance[me] = balance[me] + num_shares * current_funds_price;
    }

    function report_new_stock_price(uint32 new_price) public payable {
        require(stocks_in_funds[me] > 0);
        uint32 old_price = stock_price[me];
        stock_price[me] = new_price;
        current_funds_price = current_funds_price - old_price * stocks_in_funds[me] + new_price * stocks_in_funds[me];
    }

    function initialize() public {
        admin = me;
    }
}