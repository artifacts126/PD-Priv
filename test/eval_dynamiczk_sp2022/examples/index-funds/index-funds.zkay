pragma zkay ^0.3.0;

// META-NAME index-funds
// META-DESC Index funds allowing to privately buy and sell shares.
// META-ADD

contract IndexFunds {
	final address admin;
	mapping(address => uint32) stocks_in_funds;
	mapping(address => uint32) stock_price;
	uint32 current_funds_price;

	mapping(address!x => uint32@x<+>) balance;
	mapping(address!x => uint32@x<+>) shares;
	uint32@admin<+> total_shares;

	constructor() public {
		admin = me;
	}

	function add_stocks_to_funds(address stock, uint32 amount, uint32 initial_price) public {
		require(me == admin);
		require(stocks_in_funds[stock] == 0);
		stocks_in_funds[stock] = amount;
		stock_price[stock] = initial_price;
		current_funds_price += amount * initial_price;
	}

	function pay_into() public payable {
		balance[me] += uint32(msg.value);
	}

    // it is assumed the admin always provides enough ether to the contract, e.g. if
    // stock prices rise
	function pay_out(uint32 val) public {
	    require(reveal(balance[me] >= val, all));
	    balance[me] -= val;
	    msg.sender.transfer(val);
	}

    // it is assumed that the admin buys the number of shares at the stock market
	function buy_shares(uint32@me<+> num_shares) public {
		require(reveal(balance[me] >= num_shares * current_funds_price, all));
		total_shares += reveal(num_shares, admin);
		shares[me] += num_shares;
		balance[me] -= num_shares * current_funds_price;
	}

    // it is assumed that the admin sells the number of shares at the stock market
	function sell_shares(uint32@me<+> num_shares) public {
		require(reveal(shares[me] >= num_shares, all));
		total_shares -= reveal(num_shares, admin);
		shares[me] -= num_shares;
		balance[me] += num_shares * current_funds_price;
	}

	function report_new_stock_price(uint32 new_price) public payable {
		require(stocks_in_funds[me] > 0);
		uint32 old_price = stock_price[me];
		stock_price[me] = new_price;
		current_funds_price = current_funds_price - old_price * stocks_in_funds[me] + new_price * stocks_in_funds[me];
	}
}
