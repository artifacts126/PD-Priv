pragma zkay ^0.3.0;

contract ZetherLarge {
    uint EPOCH_SIZE;
    mapping(address => uint) lastrollover;
    mapping(address => uint32) balance;
    mapping(address => uint32) pending;
    mapping(address => uint128) vault;

    function fund() public payable {
        rollover(me);
        balance[me] = balance[me] + uint32(msg.value);
    }

    function transfer(address to, uint32 val) public {
        rollover(me);
        rollover(to);
        require(val <= balance[me]);
        balance[me] = balance[me] - val;
        pending[to] = pending[to] + val;
    }

    function burn(uint32 val) public {
        rollover(me);
        require(val <= balance[me]);
        balance[me] = balance[me] - val;
        msg.sender.transfer(val);
    }

    function into_vault(uint32 val) public {
        rollover(me);
        require(val <= balance[me]);
        vault[me] = vault[me] + val;
        balance[me] = balance[me] - val;
    }

    function from_vault(uint32 val) public {
        require(val <= vault[me]);
        vault[me] = vault[me] - val;
        balance[me] = balance[me] + val;
    }

    function rollover(address y) internal {
        uint e = block.number / EPOCH_SIZE;
        if (lastrollover[y] < e) {
            balance[y] = balance[y] + pending[y];
            pending[y] = 0;
            lastrollover[y] = e;
        }
    }

    function initialize() public {
        EPOCH_SIZE = 1;
    }
}