pragma zkay ^0.3.0;

contract Inheritance {
    uint DAY;
    uint timeUntilAssumedDead;
    mapping(address => uint32) balance;
    mapping(address => uint32) total_inheritance_pledged;
    mapping(address => mapping(address => uint32)) inheritance_pledged_recv;
    mapping(address => mapping(address => uint32)) inheritance_pledged_send;
    mapping(address => uint) last_seen;
    uint _now;

    function buy() public payable {
        balance[me] = balance[me] + uint32(msg.value);
        keep_alive();
    }

    function sell(uint32 v) public {
        require(balance[me] - total_inheritance_pledged[me] >= v);
        balance[me] = balance[me] - v;
        msg.sender.transfer(v);
        keep_alive();
    }

    function transfer(uint32 v, address receiver) public {
        require(balance[me] - total_inheritance_pledged[me] >= v);
        balance[me] = balance[me] - v;
        balance[receiver] = balance[receiver] + v;
        keep_alive();
    }

    function pledge_inheritance(address recipient, uint32 amount) public {
        uint32 old_amount = inheritance_pledged_send[me][recipient];
        require(balance[me] - total_inheritance_pledged[me] + old_amount >= amount);
        inheritance_pledged_send[me][recipient] = amount;
        inheritance_pledged_recv[me][recipient] = amount;
        total_inheritance_pledged[me] = total_inheritance_pledged[me] + amount - old_amount;
        keep_alive();
    }

    function claim_inheritance(address sender) public {
        require(_now - last_seen[sender] >= timeUntilAssumedDead);
        uint32 amount = inheritance_pledged_recv[sender][me];
        balance[me] = balance[me] + amount;
        balance[sender] = balance[sender] - amount;
        total_inheritance_pledged[sender] = total_inheritance_pledged[sender] - amount;
        inheritance_pledged_recv[sender][me] = 0;
        inheritance_pledged_send[sender][me] = 0;
        keep_alive();
    }

    function keep_alive() public {
        last_seen[me] = _now;
    }

    function _test_advance_time() public {
        _now = _now + timeUntilAssumedDead;
    }

    function initialize() public {
        DAY = 24 * 60 * 60;
        timeUntilAssumedDead = 120 * DAY;
        _now = block.timestamp;
    }
}