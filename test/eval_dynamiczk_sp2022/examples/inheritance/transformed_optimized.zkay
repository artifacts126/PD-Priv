pragma zkay ^0.3.0;

contract Inheritance {
    final uint DAY = 24 * 60 * 60;
    final uint timeUntilAssumedDead = 120 * DAY;
    mapping(address => uint32) balance_original;
    mapping(address => uint32) total_inheritance_pledged_original;
    mapping(address => mapping(address => uint32)) inheritance_pledged_recv_original;
    mapping(address => mapping(address => uint32)) inheritance_pledged_send_original;
    mapping(address => uint) last_seen;
    uint _now = block.timestamp;
    mapping(address!x => uint32@x<+>) balance;
    mapping(address!x => uint32@x<+>) total_inheritance_pledged;
    mapping(address => mapping(address!x => uint32@x)) inheritance_pledged_recv;
    mapping(address!x => mapping(address => uint32@x)) inheritance_pledged_send;

    constructor() public {

    }

    function buy() public payable {
        balance[me] = addhom(unhom(balance[me]) + reveal(uint32(msg.value), me));
        keep_alive();
    }

    function sell(uint32 v) public {
        require(reveal(unhom(balance[me]) - unhom(total_inheritance_pledged[me]) >= reveal(v, me), all));
        balance[me] = addhom(unhom(balance[me]) - reveal(v, me));
        msg.sender.transfer(v);
        keep_alive();
    }

    function transfer(uint32@me v, address receiver) public {
        require(reveal(unhom(balance[me]) - unhom(total_inheritance_pledged[me]) >= v, all));
        balance[me] = addhom(unhom(balance[me]) - v);
        balance[receiver] = balance[receiver] + reveal(v, receiver);
        keep_alive();
    }

    function pledge_inheritance(address recipient, uint32@me amount) public {
        uint32@me old_amount = inheritance_pledged_send[me][recipient];
        require(reveal(unhom(balance[me]) - unhom(total_inheritance_pledged[me]) + old_amount >= amount, all));
        inheritance_pledged_send[me][recipient] = amount;
        inheritance_pledged_recv[me][recipient] = reveal(amount, recipient);
        total_inheritance_pledged[me] = addhom(unhom(total_inheritance_pledged[me]) + amount - old_amount);
        keep_alive();
    }

    function claim_inheritance(address sender) public {
        require(_now - last_seen[sender] >= timeUntilAssumedDead);
        uint32@me amount = inheritance_pledged_recv[sender][me];
        balance[me] = addhom(unhom(balance[me]) + amount);
        balance[sender] = balance[sender] - reveal(amount, sender);
        total_inheritance_pledged[sender] = total_inheritance_pledged[sender] - reveal(amount, sender);
        inheritance_pledged_recv[sender][me] = reveal(0, me);
        inheritance_pledged_send[sender][me] = reveal(0, sender);
        keep_alive();
    }

    function keep_alive() public {
        last_seen[me] = _now;
    }

    function _test_advance_time() public {
        _now = _now + timeUntilAssumedDead;
    }

    function consistency_transformation() public {
        address local_var_1 = 0x2B5AD5c4795c026514f8317c7a215E218DcCD6cF;
        balance[local_var_1] = reveal(balance_original[local_var_1], local_var_1);
        address local_var_2 = 0x6813Eb9362372EEF6200f3b1dbC3f819671cBA69;
        balance[local_var_2] = reveal(balance_original[local_var_2], local_var_2);
        address local_var_3 = 0x1efF47bc3a10a45D4B230B5d10E37751FE6AA718;
        balance[local_var_3] = reveal(balance_original[local_var_3], local_var_3);
        total_inheritance_pledged[local_var_1] = reveal(total_inheritance_pledged_original[local_var_1], local_var_1);
        inheritance_pledged_recv[local_var_1][local_var_3] = reveal(inheritance_pledged_recv_original[local_var_1][local_var_3], local_var_3);
        inheritance_pledged_recv[local_var_1][local_var_2] = reveal(inheritance_pledged_recv_original[local_var_1][local_var_2], local_var_2);
        inheritance_pledged_send[local_var_1][local_var_3] = reveal(inheritance_pledged_send_original[local_var_1][local_var_3], local_var_1);
        inheritance_pledged_send[local_var_1][local_var_2] = reveal(inheritance_pledged_send_original[local_var_1][local_var_2], local_var_1);
    }
}